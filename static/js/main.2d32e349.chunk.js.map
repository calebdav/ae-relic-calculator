{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","selectedClass","selectedQuality","essencePerHour","selectedRelic","updateClass","e","result","target","value","setState","updateQuality","updateEssencePerHour","parseInt","getHowLongEssenceWillTake","Math","round","relicList","cost","isFormValid","this","style","backgroundColor","padding","Form","Group","Label","Control","as","size","onChange","placeholder","type","Container","Row","classRelics","map","relic","Col","xs","md","lg","Image","src","rounded","onClick","name","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"i4DAgGeA,E,4MAtFbC,MAAQ,CACNC,cAAe,GACfC,gBAAiB,GACjBC,eAAgB,EAChBC,cAAe,I,EAGjBC,YAAc,SAACC,GACb,IAAMC,EAA4B,cAAnBD,EAAEE,OAAOC,MAAwB,GAAKH,EAAEE,OAAOC,MAC9D,EAAKC,SAAS,CAACT,cAAeM,EAAQH,cAAe,M,EAGvDO,cAAgB,SAACL,GACf,IAAMC,EAA4B,cAAnBD,EAAEE,OAAOC,MAAwB,GAAKH,EAAEE,OAAOC,MAC9D,EAAKC,SAAS,CAACR,gBAAiBK,EAAQH,cAAe,M,EAGzDQ,qBAAuB,SAACN,GACtB,EAAKI,SAAS,CAACP,eAAgBU,SAASP,EAAEE,OAAOC,QAAU,K,EAG7DK,0BAA4B,WAC1B,MAA0C,EAAKd,MAAvCI,EAAR,EAAQA,cAAeD,EAAvB,EAAuBA,eACvB,OAAOY,KAAKC,MAAMC,EAAUb,GAAec,KAAOf,EAAiB,KAAQ,K,4CAG7E,WAAU,IAAD,OACDgB,EAA2C,KAA7BC,KAAKpB,MAAMC,eAAuD,KAA/BmB,KAAKpB,MAAME,gBAClE,EAA0EkB,KAAKpB,MAAvEC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,gBAAiBE,EAAxC,EAAwCA,cAAeD,EAAvD,EAAuDA,eAEvD,OACE,qBAAKkB,MAAO,CAACC,gBAAiB,YAAaC,QAAS,QAApD,SACE,sBAAKF,MAAO,CAACC,gBAAiB,QAASC,QAAS,QAAhD,UACE,8BACE,eAACC,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,2BACA,eAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SAASC,KAAK,KAAKC,SAAUV,KAAKf,YAAnD,UACE,+CACA,gDACA,6CACA,2CACA,+CACA,iDAEF,uBACA,cAACmB,EAAA,EAAKE,MAAN,6BACA,eAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SAASC,KAAK,KAAKC,SAAUV,KAAKT,cAAnD,UACE,+CACA,4CACA,+CACA,0CACA,0CACA,+CAEF,uBACA,cAACa,EAAA,EAAKE,MAAN,+BACA,cAACF,EAAA,EAAKG,QAAN,CAAcI,YAAY,IAAIC,KAAK,SAASF,SAAUV,KAAKR,4BAG9DO,GACC,eAAC,WAAD,WACE,cAACK,EAAA,EAAKE,MAAN,+BACA,eAACO,EAAA,EAAD,WACE,uBACA,cAACC,EAAA,EAAD,UACGC,EAAYlC,GAAeC,GAAiBkC,KAAI,SAACC,GAAD,OAC/C,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACE,cAACC,EAAA,EAAD,CAAOC,IAAK,gBAAiBC,SAAO,EAACC,QAAS,kBAAM,EAAKnC,SAAS,CAAEN,cAAeiC,EAAMS,WAD5DT,EAAMS,cAM3C,0BAGe,KAAlB1C,IAA2C,GAAlBD,EACxB,kHAEA,gDAAmBiB,KAAKN,4BAAxB,kC,GA/EMiC,IAAMC,WCGTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDZ,M","file":"static/js/main.2d32e349.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport classRelics from './classRelics.json';\nimport relicList from './relicList.json';\n\nclass App extends React.Component {\n  state = {\n    selectedClass: '',\n    selectedQuality: '',\n    essencePerHour: 0,\n    selectedRelic: '',\n  }\n\n  updateClass = (e) => {\n    const result = e.target.value === 'Select...' ? '' : e.target.value;\n    this.setState({selectedClass: result, selectedRelic: ''})\n  }\n\n  updateQuality = (e) => {\n    const result = e.target.value === 'Select...' ? '' : e.target.value;\n    this.setState({selectedQuality: result, selectedRelic: ''})\n  }\n\n  updateEssencePerHour = (e) => {\n    this.setState({essencePerHour: parseInt(e.target.value) || 0})\n  }\n\n  getHowLongEssenceWillTake = () => {\n    const { selectedRelic, essencePerHour } = this.state;\n    return Math.round(relicList[selectedRelic].cost / essencePerHour * 1000) / 1000\n  }\n\n  render() {\n    const isFormValid = this.state.selectedClass !== '' && this.state.selectedQuality !== '';\n    const { selectedClass, selectedQuality, selectedRelic, essencePerHour } = this.state;\n\n    return (\n      <div style={{backgroundColor: 'lightgray', padding: '20px'}}>\n        <div style={{backgroundColor: 'white', padding: '20px'}}>\n          <div>\n            <Form.Group>\n              <Form.Label>Select Class</Form.Label>\n              <Form.Control as=\"select\" size=\"lg\" onChange={this.updateClass}>\n                <option>Select...</option>\n                <option>Sustenance</option>\n                <option>Sorcery</option>\n                <option>Might</option>\n                <option>Fortitude</option>\n                <option>Celerity</option>\n              </Form.Control>\n              <br />\n              <Form.Label>Select Quality</Form.Label>\n              <Form.Control as=\"select\" size=\"lg\" onChange={this.updateQuality}>\n                <option>Select...</option>\n                <option>Mythic</option>\n                <option>Legendary</option>\n                <option>Epic</option>\n                <option>Rare</option>\n                <option>Common</option>\n              </Form.Control>\n              <br />\n              <Form.Label>Essence per hour</Form.Label>\n              <Form.Control placeholder='0' type='number' onChange={this.updateEssencePerHour}/>\n            </Form.Group>\n          </div>\n          {isFormValid && (\n            <Fragment>\n              <Form.Label>Select the relic</Form.Label>\n              <Container>\n                <br />\n                <Row>\n                  {classRelics[selectedClass][selectedQuality].map((relic) => (\n                    <Col xs={6} md={4} lg={2} key={relic.name}>\n                      <Image src={'small-axe.png'} rounded onClick={() => this.setState({ selectedRelic: relic.name})} />\n                    </Col>\n                  ))}\n                </Row>\n              </Container>\n              <br />\n            </Fragment>\n          )}\n          {selectedRelic !== '' && (essencePerHour == 0 ? (\n            <div>Ranhorn will fall before you finish this relic, please update essence per hour.</div>\n          ): (\n            <div>It will take {this.getHowLongEssenceWillTake()} hours to complete</div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}